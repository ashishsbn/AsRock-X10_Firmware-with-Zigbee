--- a/drivers/net/wireless/ath/ath10k/core.c
+++ b/drivers/net/wireless/ath/ath10k/core.c
@@ -164,6 +164,7 @@ static const struct ath10k_hw_params ath
 		.channel_counters_freq_hz = 150000,
 		.max_probe_resp_desc_thres = 24,
 		.hw_4addr_pad = ATH10K_HW_4ADDR_PAD_BEFORE,
+		.utf_codeswap_support = true,
 		.fw = {
 			.dir = QCA99X0_HW_2_0_FW_DIR,
 			.fw = QCA99X0_HW_2_0_FW_FILE,
@@ -645,6 +646,14 @@ static int ath10k_download_fw(struct ath
 		data = ar->testmode.utf_firmware_data;
 		data_len = ar->testmode.utf_firmware_len;
 		mode_name = "utf";
+		ret = ath10k_swap_code_seg_configure(ar,
+				ATH10K_SWAP_CODE_SEG_BIN_TYPE_UTF);
+		if (ret) {
+			ath10k_err(ar,
+				   "failed to configure utf code swap: %d\n",
+				   ret);
+			return ret;
+		}
 		break;
 	default:
 		ath10k_err(ar, "unknown firmware mode: %d\n", mode);
@@ -1835,7 +1844,7 @@ static int ath10k_core_probe_fw(struct a
 		goto err_free_firmware_files;
 	}
 
-	ret = ath10k_swap_code_seg_init(ar);
+	ret = ath10k_swap_code_seg_init(ar, ATH10K_SWAP_CODE_SEG_BIN_TYPE_FW);
 	if (ret) {
 		ath10k_err(ar, "failed to initialize code swap segment: %d\n",
 			   ret);
--- a/drivers/net/wireless/ath/ath10k/core.h
+++ b/drivers/net/wireless/ath/ath10k/core.h
@@ -682,6 +682,11 @@ struct ath10k {
 		/* The padding bytes's location is different on various chips */
 		enum ath10k_hw_4addr_pad hw_4addr_pad;
 
+		/* QCA99X0 chip uses utf codeswap binary in addition
+		 * to utf.bin in testmode
+		 */
+		bool utf_codeswap_support;
+
 		struct ath10k_hw_params_fw {
 			const char *dir;
 			const char *fw;
@@ -854,6 +859,12 @@ struct ath10k {
 		DECLARE_BITMAP(orig_fw_features, ATH10K_FW_FEATURE_COUNT);
 		enum ath10k_fw_wmi_op_version orig_wmi_op_version;
 		enum ath10k_fw_wmi_op_version op_version;
+
+		const struct firmware *utf_codeswap;
+		const void *utf_codeswap_data;
+		size_t utf_codeswap_len;
+
+		struct ath10k_swap_code_seg_info *utf_code_swap_seg_info;
 		/* protected by data_lock */
 		bool utf_monitor;
 	} testmode;
--- a/drivers/net/wireless/ath/ath10k/hw.h
+++ b/drivers/net/wireless/ath/ath10k/hw.h
@@ -117,6 +117,7 @@ enum qca9377_chip_id_rev {
 
 #define ATH10K_FW_UTF_FILE		"utf.bin"
 #define ATH10K_FW_UTF_API2_FILE		"utf-2.bin"
+#define ATH10K_FW_UTF_CODESWAP_FILE	"utf.codeswap.bin"
 
 /* includes also the null byte */
 #define ATH10K_FIRMWARE_MAGIC               "QCA-ATH10K"
--- a/drivers/net/wireless/ath/ath10k/swap.c
+++ b/drivers/net/wireless/ath/ath10k/swap.c
@@ -80,7 +80,7 @@ static int ath10k_swap_code_seg_fill(str
 	return 0;
 }
 
-static void
+void
 ath10k_swap_code_seg_free(struct ath10k *ar,
 			  struct ath10k_swap_code_seg_info *seg_info)
 {
@@ -148,9 +148,17 @@ int ath10k_swap_code_seg_configure(struc
 		ath10k_dbg(ar, ATH10K_DBG_BOOT, "boot found firmware code swap binary\n");
 		seg_info = ar->swap.firmware_swap_code_seg_info;
 		break;
+
+	case ATH10K_SWAP_CODE_SEG_BIN_TYPE_UTF:
+		if (!ar->testmode.utf_code_swap_seg_info)
+			return 0;
+		ath10k_dbg(ar, ATH10K_DBG_BOOT,
+			   "boot: found code swap binary for UTF firmware\n");
+		seg_info = ar->testmode.utf_code_swap_seg_info;
+		break;
+
 	default:
 	case ATH10K_SWAP_CODE_SEG_BIN_TYPE_OTP:
-	case ATH10K_SWAP_CODE_SEG_BIN_TYPE_UTF:
 		ath10k_warn(ar, "ignoring unknown code swap binary type %d\n",
 			    type);
 		return 0;
@@ -176,24 +184,42 @@ void ath10k_swap_code_seg_release(struct
 	ar->swap.firmware_swap_code_seg_info = NULL;
 }
 
-int ath10k_swap_code_seg_init(struct ath10k *ar)
+int ath10k_swap_code_seg_init(struct ath10k *ar,
+			      enum ath10k_swap_code_seg_bin_type type)
 {
 	int ret;
+	const void *codeswap_data;
+	size_t codeswap_len;
 	struct ath10k_swap_code_seg_info *seg_info;
 
-	if (!ar->swap.firmware_codeswap_len || !ar->swap.firmware_codeswap_data)
-		return 0;
+	switch (type) {
+	case ATH10K_SWAP_CODE_SEG_BIN_TYPE_FW:
+		if (!ar->swap.firmware_codeswap_len ||
+		    !ar->swap.firmware_codeswap_data)
+			return 0;
+		codeswap_data = ar->swap.firmware_codeswap_data;
+		codeswap_len = ar->swap.firmware_codeswap_len;
+		break;
+	case ATH10K_SWAP_CODE_SEG_BIN_TYPE_UTF:
+		if (!ar->testmode.utf_codeswap)
+			return 0;
+		codeswap_data = ar->testmode.utf_codeswap_data;
+		codeswap_len = ar->testmode.utf_codeswap_len;
+		break;
+	default:
+		ath10k_err(ar, "unknown code swap binary type specified %d\n",
+			   type);
+		return -EINVAL;
+	}
 
-	seg_info = ath10k_swap_code_seg_alloc(ar,
-					      ar->swap.firmware_codeswap_len);
+	seg_info = ath10k_swap_code_seg_alloc(ar, codeswap_len);
 	if (!seg_info) {
 		ath10k_err(ar, "failed to allocate fw code swap segment\n");
 		return -ENOMEM;
 	}
 
 	ret = ath10k_swap_code_seg_fill(ar, seg_info,
-					ar->swap.firmware_codeswap_data,
-					ar->swap.firmware_codeswap_len);
+					codeswap_data, codeswap_len);
 
 	if (ret) {
 		ath10k_warn(ar, "failed to initialize fw code swap segment: %d\n",
@@ -202,7 +228,10 @@ int ath10k_swap_code_seg_init(struct ath
 		return ret;
 	}
 
-	ar->swap.firmware_swap_code_seg_info = seg_info;
+	if (type == ATH10K_SWAP_CODE_SEG_BIN_TYPE_FW)
+		ar->swap.firmware_swap_code_seg_info = seg_info;
+	if (type == ATH10K_SWAP_CODE_SEG_BIN_TYPE_UTF)
+		ar->testmode.utf_code_swap_seg_info = seg_info;
 
 	return 0;
 }
--- a/drivers/net/wireless/ath/ath10k/swap.h
+++ b/drivers/net/wireless/ath/ath10k/swap.h
@@ -67,6 +67,9 @@ struct ath10k_swap_code_seg_info {
 int ath10k_swap_code_seg_configure(struct ath10k *ar,
 				   enum ath10k_swap_code_seg_bin_type type);
 void ath10k_swap_code_seg_release(struct ath10k *ar);
-int ath10k_swap_code_seg_init(struct ath10k *ar);
-
+int ath10k_swap_code_seg_init(struct ath10k *ar,
+			      enum ath10k_swap_code_seg_bin_type type);
+void
+ath10k_swap_code_seg_free(struct ath10k *ar,
+			  struct ath10k_swap_code_seg_info *seg_info);
 #endif
--- a/drivers/net/wireless/ath/ath10k/testmode.c
+++ b/drivers/net/wireless/ath/ath10k/testmode.c
@@ -23,6 +23,7 @@
 #include "wmi.h"
 #include "hif.h"
 #include "hw.h"
+#include "swap.h"
 
 #include "testmode_i.h"
 
@@ -309,6 +310,56 @@ static int ath10k_tm_fetch_firmware(stru
 	return 0;
 }
 
+static void ath10k_tm_free_utf_codeswap(struct ath10k *ar)
+{
+	if (ar->testmode.utf_code_swap_seg_info) {
+		ath10k_swap_code_seg_free(ar,
+					  ar->testmode.utf_code_swap_seg_info);
+		ar->testmode.utf_code_swap_seg_info = NULL;
+	}
+
+	release_firmware(ar->testmode.utf_codeswap);
+	ar->testmode.utf_codeswap = NULL;
+
+	ar->testmode.utf_codeswap_data = NULL;
+	ar->testmode.utf_codeswap_len = 0;
+}
+
+static int ath10k_tm_init_utf_codeswap(struct ath10k *ar)
+{
+	char filename[100];
+	int ret;
+
+	snprintf(filename, sizeof(filename), "%s/%s",
+		 ar->hw_params.fw.dir, ATH10K_FW_UTF_CODESWAP_FILE);
+
+	/* load utf codeswap firmware image */
+	ret = request_firmware(&ar->testmode.utf_codeswap, filename, ar->dev);
+	if (ret) {
+		ath10k_warn(ar,
+			    "failed to get utf codeswap fw'%s': %d\n",
+			    filename, ret);
+		return ret;
+	}
+
+	ar->testmode.utf_codeswap_data = ar->testmode.utf_codeswap->data;
+	ar->testmode.utf_codeswap_len = ar->testmode.utf_codeswap->size;
+
+	ret = ath10k_swap_code_seg_init(ar, ATH10K_SWAP_CODE_SEG_BIN_TYPE_UTF);
+	if (ret) {
+		ath10k_warn(ar,
+			    "failed to initialize utf code swap segment: %d\n",
+			    ret);
+		goto err_release_codeswap_fw;
+	}
+
+	return 0;
+
+err_release_codeswap_fw:
+	ath10k_tm_free_utf_codeswap(ar);
+	return ret;
+}
+
 static int ath10k_tm_cmd_utf_start(struct ath10k *ar, struct nlattr *tb[])
 {
 	const char *ver;
@@ -341,6 +392,16 @@ static int ath10k_tm_cmd_utf_start(struc
 		goto err;
 	}
 
+	if (ar->hw_params.utf_codeswap_support) {
+		ret = ath10k_tm_init_utf_codeswap(ar);
+		if (ret) {
+			ath10k_warn(ar,
+				    "failed to init codeswap for utf mode: %d\n",
+				    ret);
+			goto err_release_utf_fw;
+		}
+	}
+
 	spin_lock_bh(&ar->data_lock);
 	ar->testmode.utf_monitor = true;
 	spin_unlock_bh(&ar->data_lock);
@@ -392,7 +453,10 @@ err_fw_features:
 	memcpy(ar->fw_features, ar->testmode.orig_fw_features,
 	       sizeof(ar->fw_features));
 	ar->wmi.op_version = ar->testmode.orig_wmi_op_version;
+	if (ar->hw_params.utf_codeswap_support)
+		ath10k_tm_free_utf_codeswap(ar);
 
+err_release_utf_fw:
 	release_firmware(ar->testmode.utf);
 	ar->testmode.utf = NULL;
 
@@ -423,6 +487,9 @@ static void __ath10k_tm_cmd_utf_stop(str
 	release_firmware(ar->testmode.utf);
 	ar->testmode.utf = NULL;
 
+	if (ar->hw_params.utf_codeswap_support)
+		ath10k_tm_free_utf_codeswap(ar);
+
 	ar->state = ATH10K_STATE_OFF;
 }
 
